let merge,Career,userType,userResolvers,careerType,carResolvers;_66d‍.w("lodash",[["merge",["merge"],function(v){merge=v}]]);_66d‍.w("../models/career",[["default",["Career"],function(v){Career=v}]]);_66d‍.w("./src/user.js",[["typeDefs",["userType"],function(v){userType=v}],["resolvers",["userResolvers"],function(v){userResolvers=v}]]);_66d‍.w("./src/career.js",[["typeDefs",["careerType"],function(v){careerType=v}],["resolvers",["carResolvers"],function(v){carResolvers=v}]]);const { ApolloServer, gql} = require('apollo-server-express');
const express = require('express');
const bodyParser = require('body-parser');

const { makeExecutableSchema } = require('graphql-tools');
const User = require('../models/user');


require('./config');



const Query = gql`
  type Query{
    _empty: String
  },

  type Mutation{
    _empty: String
  }
`;

const resolvers = {};
const schema = makeExecutableSchema({
  typeDefs: [Query, userType, careerType],
  resolvers: merge(resolvers,userResolvers,carResolvers),
});


const server = new ApolloServer({
  schema
})

const app = express();
app.use(bodyParser.json());

server.applyMiddleware({ app });

app.listen({port: 8000}, () => {
  console.log(`Apollo Server ready on http://localhost:8000${server.graphqlPath}`);
});
