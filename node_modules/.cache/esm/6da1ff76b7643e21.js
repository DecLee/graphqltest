_b76‍.x([["typeDefs",()=>typeDefs],["resolvers",()=>resolvers]]);const { gql } = require('apollo-server-express');

       const typeDefs = gql`
  type Career {
    id: ID!
    careerName: String!
    description: String!
    prerequisite: Career
    ##author: User!
  }
  extend type Query {
    career(careerName: String!): Career
    careers: [Career]
  }
  extend type Mutation{
    addCareer(careerName: String!, description: String!, prerequisite: String): Career
    deleteCareer(careerName: String!): Career
    updateCareer(careerName: String!, description: String!, prerequisite: String): Career
  }
`;

       const resolvers = {
  Query: {
    career: async (_, args) => await Career.findById(args.id).exec(),
    careers: async () => await Career.find({}).exec(),
  },
  Mutation: {
    addCareer: async(parent,args) => {
      try{
        let response = await Career.create(args, function(err,obj){
          if(err) return handleError(err);
          console.log(obj);
        })
        return response;
      } catch (e) {
        return e.message;
      }
    },
    deleteCareer: async (_,args) => {
      try{
        let response = await Career.findByIdAndRemove(args.id, function(err,obj){
          if(err) return handleError(err);
          console.log(obj);
        });
        return response;
      } catch(e) {
        return e.message;
      }
    },
    updateCareer: async (_,args) => {
      try {
        let response = await Career.findByIdAndUpdate({_id:args.id},
        {description:args.description,
        prerequisite:args.prerequisite},
        {new:true},
        function(err,obj) {
          if(err) return handleError(err);
          console.log(obj);
        }
      )
      return response;
    } catch(e){
      return e.message;
      }
    },
  },

};
